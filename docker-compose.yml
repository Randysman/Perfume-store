version: '3.8'

services:
  db: 
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 15s
      retries: 5
    networks:
      - perfume-network
    restart: unless-stopped

  web:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - perfume-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - perfume-network
    depends_on:
      db:
        condition: service_started
    restart: unless-stopped

  celery:
    build: .
    command: celery -A django_project worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DEBUG=0
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      redis: 
        condition: service_started
      web:
        condition: service_started
      db:
        condition: service_healthy
    restart: unless-stopped

  celery-beat:
    build: .
    command: celery -A django_project beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DEBUG=0
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      redis: 
        condition: service_started
      web:
        condition: service_started
      db:
        condition: service_healthy
    restart: unless-stopped

networks:
  perfume-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: